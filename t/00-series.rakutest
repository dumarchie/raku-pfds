use v6.d;
use Test;

use lib 'lib';
use PFDS;

subtest 'series', {
    subtest 'empty series', {
        $_ := series;
        isa-ok $_, PFDS::Series, 'series() returns a PFDS::Series';
        cmp-ok .Bool, '=:=', False, '.Bool returns False';
        cmp-ok .head, '=:=', Nil, '.head returns Nil';
        cmp-ok .list, 'eqv', (), '.list returns no values';
        cmp-ok .skip, '=:=', $_, '.skip returns the invocant';
    }

    subtest 'series($item)', {
        my \value = Mu.new;
        my $item  = value;
        $_ := series($item);
        isa-ok $_, PFDS::Series::Node,
          'series($item) returns a PFDS::Series::Node';

        cmp-ok .Bool, '=:=', True, '.Bool returns True';

        $item = Mu.new; # to check that the .head is bound to the bare value
        cmp-ok .head, '=:=', value,
          '.head returns the value of $item when series($item) was called';

        cmp-ok .skip, 'eqv', series(), '.skip returns the empty series';
    }

    subtest 'series(1, 2)', {
        $_ := series(1, 2);
        isa-ok $_, PFDS::Series::Node,
          'series(1, 2) returns a PFDS::Series::Node';

        cmp-ok .head, '=:=', 1, '.head returns the value 1';
        cmp-ok .list, 'eqv', (1, 2), '.list returns values 1, 2';
        cmp-ok .skip, 'eqv', series(2), '.skip returns series(2)';
    }

    # Check that a Slip slips
    cmp-ok series(Empty), 'eqv', series(),
      'series(Empty) returns the empty series';
}

# A Producer keeps track of how many values have been produced
# so we can check that streams are as lazy as possible
my class Producer is Range  {
    has int $.produced;

    method produce(int \pos) {
        my \value := self.min + pos;
        return Nil if value > self.max;

        $!produced = pos + 1;
        $(value);
    }

    method iterator() {
        my class :: does Iterator {
            has $.producer;
            has int $.pos;

            method pull-one() is raw {
                $!producer.produce($!pos++) // IterationEnd;
            }
        }.new(producer => self);
    }
}

subtest 'stream', {
    my \values = Producer.new(0, 3);
    $_ := stream(values);
    isa-ok $_, PFDS::Stream, "stream(values) returns a PFDS::Stream";
    is values.produced, 0, 'no values were evaluated';

    cmp-ok .Bool, '=:=', True, '.Bool returns True';
    cmp-ok .head, '=:=', 0, '.head returns the first value';
    subtest '.skip', {
        isa-ok $_, PFDS::Stream, "the result is a PFDS::Stream";
        is values.produced, 1, 'only the first of the values was evaluated';
        cmp-ok $_, 'eqv', stream(1..3),
          'the second stream evaluates the rest of the values on demand';
    } given .skip;
}

subtest 'infix ++', {
    $_ := series(1) ++ stream(2, 3);
    isa-ok $_, PFDS::Stream,
      "series(1) ++ stream(2, 3) returns a PFDS::Stream";

    cmp-ok .Bool, '=:=', True, '.Bool returns True';
    cmp-ok .head, '=:=', 1, '.head returns 1';
    cmp-ok .list, 'eqv', (1, 2, 3), '.list returns (1, 2, 3)';
    cmp-ok .skip, 'eqv', stream(2, 3), '.skip returns stream(2, 3)';
}


subtest '.copy(n)', {
    $_ := series(1, 2, 3);

    my \n = (-1, .9).pick;
    cmp-ok .copy(n), 'eqv', series,
      '.copy(n) returns the empty series if n.Int <= 0';

    cmp-ok .copy(1), 'eqv', stream(1),
      '.copy(1) returns a stream with the first value of the invocant';

    cmp-ok .copy(4), 'eqv', stream(1..3),
      '.copy(n) returns a stream with the first n values of the invocant';
}

subtest '.skip(n)', {
    $_ := series(1) ++ stream(2..3);

    my \n = (-1, .9).pick;
    cmp-ok .skip(n), '=:=', $_, '.skip(n) returns the invocant if n.Int <= 0';
    cmp-ok .skip(1), 'eqv', stream(2..3),
      '.skip(1) returns the series following the first value of the invocant';

    cmp-ok .skip(2), 'eqv', stream(3),
      '.skip(2) returns the series following the first two values';

    cmp-ok .skip(3.9), 'eqv', stream(),
      '.skip(n) returns the empty series if n.Int == the number of values';

    cmp-ok .skip(4), 'eqv', series(),
      '.skip(n) returns the empty series if n.Int > the number of values';
}

done-testing;
